{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Legion Documentation","text":"<p>Welcome to the Legion documentation! This documentation will help you understand and use Legion effectively.</p>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>\ud83d\udcda Installation Guide</li> <li>\ud83d\ude80 Quick Start</li> <li>\ud83e\udd16 Agent Definition</li> <li>\ud83d\udee0\ufe0f Development Setup</li> <li>\ud83d\udc65 Contributing</li> </ul>"},{"location":"#what-is-legion","title":"What is Legion?","text":"<p>Legion is a powerful framework for building and managing agents. This documentation will guide you through installation, basic concepts, and advanced usage.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with Legion, follow these steps:</p> <ol> <li>First, follow our Installation Guide</li> <li>Then, check out the Quick Start guide</li> <li>Learn about Core Concepts</li> </ol>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions! Please see our Contributing Guide for details on how to get involved.</p>"},{"location":"DOCUMENTATION_GUIDE/","title":"Documentation","text":"<p>This project uses MkDocs-Material for documentation.</p>"},{"location":"DOCUMENTATION_GUIDE/#quick-start","title":"Quick Start","text":"<pre><code>pip install mkdocs-material==9.5.49\n\n# Start dev server\nmkdocs serve\n\n# Build static site\nmkdocs build\n</code></pre> <p>Visit http://127.0.0.1:8000 during development.</p>"},{"location":"DOCUMENTATION_GUIDE/#file-structure","title":"File Structure","text":"<pre><code>docs/\n\u251c\u2500\u2500 index.md      # Homepage\n\u2514\u2500\u2500 assets/       # Images, files, etc.\n</code></pre>"},{"location":"DOCUMENTATION_GUIDE/#writing-docs","title":"Writing Docs","text":"<ol> <li>Create <code>.md</code> files in the <code>docs/</code> directory</li> <li>Update <code>mkdocs.yml</code> to include new pages</li> <li>Use standard Markdown syntax</li> </ol> <p>See MkDocs writing guide for detailed information.</p>"},{"location":"contributing/","title":"Contributing to Legion","text":"<p>We're excited that you're interested in contributing to Legion! This guide will help you get started with the contribution process.</p>"},{"location":"contributing/#ways-to-contribute","title":"Ways to Contribute","text":"<ul> <li>Bug Reports: If you find a bug, please create an issue in our GitHub repository</li> <li>Feature Requests: Have an idea for a new feature? Share it through GitHub issues</li> <li>Documentation: Help improve our documentation by fixing typos, adding examples, or clarifying explanations</li> <li>Code Contributions: Submit pull requests for bug fixes or new features</li> </ul>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<p>For information about setting up your development environment, please refer to our installation guide.</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Fork the repository</li> <li>Create a new branch for your feature/fix</li> <li>Make your changes</li> <li>Submit a pull request with a clear description of the changes</li> </ol>"},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow the existing code style</li> <li>Include comments where necessary</li> <li>Write clear commit messages</li> </ul>"},{"location":"contributing/#questions","title":"Questions?","text":"<p>If you have questions, feel free to open a discussion on GitHub.</p>"},{"location":"contributing/setup-development/","title":"Development Environment Setup","text":"<p>This guide provides comprehensive instructions for setting up your development environment for Legion.</p>"},{"location":"contributing/setup-development/#development-environment-options","title":"Development Environment Options","text":"<p>Legion offers two primary methods for setting up your development environment:</p> <ol> <li>Manual Installation</li> <li>Nix Shell (Recommended for team consistency)</li> </ol>"},{"location":"contributing/setup-development/#manual-installation","title":"Manual Installation","text":""},{"location":"contributing/setup-development/#prerequisites","title":"Prerequisites","text":"<ul> <li>Windows 10/11 with WSL2 enabled</li> <li>Ubuntu on WSL2</li> <li>Git</li> </ul>"},{"location":"contributing/setup-development/#step-by-step-setup","title":"Step-by-Step Setup","text":"<ol> <li> <p>Update WSL Ubuntu System <pre><code>sudo apt update &amp;&amp; sudo apt upgrade -y\n</code></pre></p> </li> <li> <p>Install Python and Development Tools <pre><code>sudo apt install -y python3.11 python3.11-venv python3-pip build-essential\n</code></pre></p> </li> <li> <p>Create and Activate Virtual Environment <pre><code>python3.11 -m venv .venv\nsource .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install Python Dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> </ol>"},{"location":"contributing/setup-development/#nix-shell-setup","title":"Nix Shell Setup","text":"<p>Nix provides a fully reproducible development environment that ensures all team members have identical setups.</p>"},{"location":"contributing/setup-development/#what-is-nix","title":"What is Nix?","text":"<p>Nix creates isolated development environments that bundle everything your project needs - from system packages to language-specific dependencies. Unlike traditional approaches, Nix manages all dependencies in isolation, ensuring consistent development environments across your team.</p>"},{"location":"contributing/setup-development/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Install Nix Package Manager <pre><code>sh &lt;(curl -L https://nixos.org/nix/install) --daemon\n</code></pre></p> </li> <li> <p>Enable Flakes (Optional) Add to <code>~/.config/nix/nix.conf</code>: <pre><code>experimental-features = nix-command flakes\n</code></pre></p> </li> <li> <p>Using the Development Environment <pre><code>nix-shell shell.nix\n</code></pre></p> </li> </ol>"},{"location":"contributing/setup-development/#troubleshooting-nix-setup","title":"Troubleshooting Nix Setup","text":""},{"location":"contributing/setup-development/#permission-issues","title":"Permission Issues","text":"<ul> <li>Verify group membership: <code>groups</code></li> <li>Check socket permissions: <code>ls -l /nix/var/nix/daemon-socket/socket</code></li> <li>Restart daemon if needed: <code>sudo systemctl restart nix-daemon</code></li> </ul>"},{"location":"contributing/setup-development/#channel-update-failures","title":"Channel Update Failures","text":"<ul> <li>Check internet connection</li> <li>Verify channel: <code>nix-channel --list</code></li> <li>Try removing and re-adding channel</li> </ul>"},{"location":"contributing/setup-development/#environment-verification","title":"Environment Verification","text":"<p>To verify your setup is working correctly:</p> <ol> <li>Activate the environment (either venv or nix-shell)</li> <li>Run the verification script: <pre><code>python verify_env.py\n</code></pre></li> </ol>"},{"location":"contributing/setup-development/#included-tools-and-dependencies","title":"Included Tools and Dependencies","text":"<ul> <li>Python 3.11</li> <li>pip</li> <li>venv</li> <li>build-essential</li> <li>Development libraries</li> </ul>"},{"location":"contributing/setup-development/#maintenance","title":"Maintenance","text":"<p>Keep your development environment up to date:</p> <ol> <li> <p>Regular Updates <pre><code>git pull origin main\npip install -r requirements.txt  # For manual setup\n# OR\nnix-shell  # For Nix setup (will automatically update)\n</code></pre></p> </li> <li> <p>Verify Environment <pre><code>python verify_env.py\n</code></pre></p> </li> </ol>"},{"location":"contributing/setup-development/#need-help","title":"Need Help?","text":"<p>If you encounter any issues during setup:</p> <ol> <li>Check our Troubleshooting Guide</li> <li>Open an issue on our GitHub repository</li> <li>Join our Discord community for real-time support</li> </ol>"},{"location":"core-concepts/agents/agent-definition/","title":"Agent Definition","text":"<p>In Legion, agents are the fundamental building blocks of your multi-agent system. This guide explains how to define and customize agents.</p>"},{"location":"core-concepts/agents/agent-definition/#basic-agent-structure","title":"Basic Agent Structure","text":"<p>An agent in Legion is defined using the <code>@agent</code> decorator:</p> <pre><code>from legion.agents import agent\nfrom legion.interface.decorators import tool\n\n@agent(model=\"openai:gpt-4-turbo\", temperature=0.2)\nclass MyAgent:\n    \"\"\"System prompt that defines the agent's role and behavior\"\"\"\n\n    @tool\n    def my_tool(self, param: str) -&gt; str:\n        \"\"\"Tool description\"\"\"\n        return f\"Processed: {param}\"\n</code></pre>"},{"location":"core-concepts/agents/agent-definition/#agent-decorator-parameters","title":"Agent Decorator Parameters","text":"<ul> <li><code>model</code>: The LLM provider and model to use (e.g., \"openai:gpt-4-turbo\", \"anthropic:claude-3\")</li> <li><code>temperature</code>: Controls randomness in responses (0.0 to 1.0)</li> <li><code>tools</code>: List of tools available to the agent</li> <li><code>memory</code>: Memory provider for storing conversation history</li> </ul>"},{"location":"core-concepts/agents/agent-definition/#system-prompts","title":"System Prompts","text":"<p>The class docstring serves as the agent's system prompt:</p> <pre><code>@agent(model=\"openai:gpt-4-turbo\")\nclass AnalysisAgent:\n    \"\"\"You are an expert data analyst skilled in interpreting complex datasets.\n    Always provide clear explanations and cite relevant statistics.\"\"\"\n</code></pre>"},{"location":"core-concepts/agents/agent-definition/#adding-tools","title":"Adding Tools","text":"<p>Tools can be added in two ways:</p> <ol> <li> <p>As class methods: <pre><code>@agent(model=\"openai:gpt-4-turbo\")\nclass CalculatorAgent:\n    @tool\n    def add(self, a: float, b: float) -&gt; float:\n        \"\"\"Add two numbers together\"\"\"\n        return a + b\n</code></pre></p> </li> <li> <p>As external functions: <pre><code>@tool\ndef multiply(a: float, b: float) -&gt; float:\n    \"\"\"Multiply two numbers\"\"\"\n    return a * b\n\n@agent(model=\"openai:gpt-4-turbo\", tools=[multiply])\nclass MathAgent:\n    \"\"\"A mathematical agent with access to multiplication\"\"\"\n</code></pre></p> </li> </ol>"},{"location":"core-concepts/agents/agent-definition/#using-type-hints","title":"Using Type Hints","text":"<p>Legion uses type hints for input validation:</p> <pre><code>from typing import List, Optional\nfrom pydantic import Field\n\n@agent(model=\"openai:gpt-4-turbo\")\nclass DataProcessor:\n    @tool\n    def process_items(\n        self,\n        items: List[str],\n        prefix: Optional[str] = None,\n        max_items: int = Field(default=10, gt=0, le=100)\n    ) -&gt; List[str]:\n        \"\"\"Process a list of items with optional prefix\"\"\"\n        results = items[:max_items]\n        if prefix:\n            results = [f\"{prefix}: {item}\" for item in results]\n        return results\n</code></pre>"},{"location":"core-concepts/agents/agent-definition/#best-practices","title":"Best Practices","text":"<ol> <li>Clear System Prompts: Write detailed, specific system prompts</li> <li>Tool Documentation: Always provide clear docstrings for tools</li> <li>Type Safety: Use type hints and Pydantic fields for validation</li> <li>Modular Design: Keep agents focused on specific tasks</li> <li>Error Handling: Implement proper error handling in tools</li> </ol>"},{"location":"core-concepts/agents/agent-definition/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about System Prompts</li> <li>Understand Agent State</li> <li>Explore Agent Communication</li> </ul>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>Legion can be installed using pip or through a development environment setup. Choose the method that best suits your needs.</p>"},{"location":"getting-started/installation/#development-environment","title":"Development Environment","text":"<p>If you're a contributor, check out our Contribution Section.</p>"},{"location":"getting-started/installation/#standard-installation","title":"Standard Installation","text":""},{"location":"getting-started/installation/#using-pip","title":"Using pip","text":"<pre><code>pip install legion\n</code></pre>"},{"location":"getting-started/installation/#using-poetry","title":"Using Poetry","text":"<pre><code>poetry add legion\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<p>For development purposes, we recommend setting up a proper development environment. You have two options:</p>"},{"location":"getting-started/installation/#option-1-manual-setup","title":"Option 1: Manual Setup","text":"<p>Follow our detailed Development Environment Setup Guide for step-by-step instructions.</p>"},{"location":"getting-started/installation/#option-2-using-nix","title":"Option 2: Using Nix","text":"<p>For a fully reproducible development environment, we recommend using Nix. Follow our Nix Setup Guide for instructions.</p>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify your setup:</p> <pre><code>import legion\nprint(legion.__version__)\n</code></pre>"},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":"<ul> <li>Python 3.11 or higher</li> <li>Operating System: Linux, macOS, or Windows with WSL2</li> <li>Recommended: 8GB RAM or more for running multiple agents</li> </ul>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Follow the Quick Start Guide</li> <li>Learn about Basic Concepts</li> <li>Try the First Agent Example</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Legion quickly. We'll cover the basic setup and show you how to create your first multi-agent system.</p>"},{"location":"getting-started/quick-start/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or higher</li> <li>pip (Python package installer)</li> </ul>"},{"location":"getting-started/quick-start/#installation","title":"Installation","text":"<pre><code>pip install legion\n</code></pre>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<p>Here's a simple example of creating an agent:</p> <pre><code>from legion.agents import agent\nfrom legion.interface.decorators import tool\n\n@agent(model=\"openai:gpt-4-turbo\", temperature=0.2)\nclass SimpleAgent:\n    \"\"\"A simple agent that can perform basic tasks\"\"\"\n\n    @tool\n    def greet(self, name: str) -&gt; str:\n        \"\"\"Greet someone by name\"\"\"\n        return f\"Hello, {name}!\"\n\nasync def main():\n    agent = SimpleAgent()\n    response = await agent.aprocess(\"Greet someone named Alice\")\n    print(response.content)\n\nif __name__ == \"__main__\":\n    import asyncio\n    asyncio.run(main())\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<ul> <li>Read the Installation Guide for detailed setup instructions</li> <li>Learn about Basic Concepts</li> <li>Try the First Agent Example</li> </ul>"}]}